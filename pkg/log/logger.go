/*
Package log provides Logger
*/
package log

import (
	"context"
	"encoding/json"
	"log"

	"github.com/vardius/golog"

	"github.com/vardius/go-api-boilerplate/pkg/metadata"
)

const (
	// Prefix text to prefix to each log entry generated by the Logger
	TraceIDPrefix = "%s "
)

// Logger allow to create logger based on env setting
type Logger struct {
	golog.Logger
}

// New creates new logger based on environment
func New(env string) *Logger {
	l := golog.New()
	if env != "development" {
		l.SetVerbosity(golog.DefaultVerbosity &^ golog.Debug)
	}

	l.SetFlags(log.Ldate | log.Ltime | log.Lmicroseconds | log.LUTC)

	return &Logger{l}
}

func (l *Logger) Debug(ctx context.Context, format string, args ...interface{}) {
	m := getMetadata(ctx)
	if m != nil {
		args = append([]interface{}{m}, args...)
		format = TraceIDPrefix + format
	}

	l.Logger.Debug(ctx, format, args...)
}

func (l *Logger) Info(ctx context.Context, format string, args ...interface{}) {
	m := getMetadata(ctx)
	if m != nil {
		args = append([]interface{}{m}, args...)
		format = TraceIDPrefix + format
	}

	l.Logger.Info(ctx, format, args...)
}

func (l *Logger) Warning(ctx context.Context, format string, args ...interface{}) {
	m := getMetadata(ctx)
	if m != nil {
		args = append([]interface{}{m}, args...)
		format = TraceIDPrefix + format
	}

	l.Logger.Warning(ctx, format, args...)
}

func (l *Logger) Error(ctx context.Context, format string, args ...interface{}) {
	m := getMetadata(ctx)
	if m != nil {
		args = append([]interface{}{m}, args...)
		format = TraceIDPrefix + format
	}

	l.Logger.Error(ctx, format, args...)
}

func (l *Logger) Critical(ctx context.Context, format string, args ...interface{}) {
	m := getMetadata(ctx)
	if m != nil {
		args = append([]interface{}{m}, args...)
		format = TraceIDPrefix + format
	}

	l.Logger.Critical(ctx, format, args...)
}

func getMetadata(ctx context.Context) []byte {
	mtd, ok := metadata.FromContext(ctx)
	if !ok {
		return nil
	}

	jsn, err := json.Marshal(mtd)
	if err != nil {
		return nil
	}

	return jsn
}
